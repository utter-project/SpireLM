import "languages.tconf"
import "uservars_spite.tconf"

global {
    ducttape_experimental_imports=true
    ducttape_experimental_submitters=true
    ducttape_experimental_multiproc=true
    seed=(Seed: 42)

    mt_corpus=(
        Corpus:
            commonvoice=/mnt/scratch-artemis/bpop/spite-corpus/commonvoice/raw
            spgi=/mnt/scratch-artemis/bpop/spite-corpus/spgi/raw
            gigaspeech=/mnt/scratch-artemis/bpop/spite-corpus/gigaspeech/raw
    )
    corpus_dir=(
        Corpus:
            commonvoice=/mnt/scratch-artemis/bpop/SpireLM/experiments/label-commonvoice-outputs/Deduplicate
            spgi=/mnt/scratch-artemis/bpop/SpireLM/experiments/label-spgi-outputs/Deduplicate
            gigaspeech=/mnt/scratch-artemis/bpop/SpireLM/experiments/label-gigaspeech-outputs/Deduplicate
    )
    audio_lengths=(
        Corpus:
            commonvoice=/mnt/scratch-artemis/bpop/SpireLM/experiments/label-commonvoice-outputs/ComputeLengths/Baseline.baseline/times.npy
            spgi=/mnt/scratch-artemis/bpop/SpireLM/experiments/label-spgi-outputs/ComputeLengths/Baseline.baseline/times.npy
            gigaspeech=/mnt/scratch-artemis/bpop/SpireLM/experiments/label-gigaspeech-outputs/ComputeLengths/Baseline.baseline/times.npy
    )
    shard_count=(Corpus: commonvoice=11 spgi=20 gigaspeech=83)

    threshold=(Threshold: 0.85 0.9 0.86 0.87 0.88 0.89 0.0)

    # n_lines==0 -> take everything that reaches the threshold
    n_lines=(NLines: 250000 500000 1000000 0)

    subsampling=(Subsampling: random topk)
    models=(
        Models:
            original="tower_instruct_mistral,euro_9B_instruct"
            euro_9B_instruct="euro_9B_instruct"
            tower_instruct_mistral="tower_instruct_mistral"
    )

}
